    local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
    local Window = Library.CreateLib("Hades God Hub | Mystic Falls", "DarkTheme")
     -- MAIN
local Main = Window:NewTab("Witch")
local MainSection = Main:NewSection("Powers")
MainSection:NewToggle("Push", "Keybind (R)", function()
    print("You just clicked the bind")
    
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:
	    GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "r" then
            local player = getPlayer()
            if player then
	    
local args = {
    [1] = "Push",
    [2] = {
        [1] = player.Character
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Witch"):FireServer(unpack(args))

    
player.character.RagdollConstraints:destroy()

    end
    end
    end)
end)

MainSection:NewToggle("Pain Inflict", "Keybind (G)", function()
    print("You just clicked the bind")
    
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:
	    GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "g" then
            local player = getPlayer()
            if player then
	    
local args = {
    [1] = "PainInflict",
    [2] = {
        [1] = player.Character,
        [2] = false
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Witch"):FireServer(unpack(args))

    
player.character.RagdollConstraints:destroy()

    end
    end
    end)
end)

MainSection:NewToggle("Burn", "Keybind (Q)", function()
    print("You just clicked the bind")
    
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:
	    GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "q" then
            local player = getPlayer()
            if player then
	    
local args = {
    [1] = "Magic",
    [2] = {
        [1] = "FireSpell",
        [2] = player.Character
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Witch"):FireServer(unpack(args))

    
player.character.RagdollConstraints:destroy()

    end
    end
    end)
end)

MainSection:NewToggle("Delfan", "Keybind (F)", function()
    print("You just clicked the bind")
    
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:
	    GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "f" then
            local player = getPlayer()
            if player then

local args = {
    [1] = "Magic",
    [2] = {
        [1] = "TelekineticHeart",
        [2] = player.Character
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Witch"):FireServer(unpack(args))

player.character.RagdollConstraints:destroy()

    end
    end
    end)
end)

MainSection:NewToggle("Break bone", "Keybind (T)", function()
    print("You just clicked the bind")
    
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:
	    GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "t" then
            local player = getPlayer()
            if player then

local args = {
    [1] = "Magic",
    [2] = {
        [1] = "BreakLeg",
        [2] = player.Character
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Witch"):FireServer(unpack(args))

player.character.RagdollConstraints:destroy()

    end
    end
    end)
end)

MainSection:NewToggle("Freeze", "Keybind (Z)", function()
    print("You just clicked the bind")
    
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:
	    GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "z" then
            local player = getPlayer()
            if player then

local args = {
    [1] = "Magic",
    [2] = {
        [1] = "Freeze",
        [2] = player.Character
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Witch"):FireServer(unpack(args))

player.character.RagdollConstraints:destroy()

    end
    end
    end)
end)

MainSection:NewToggle("Invisibility", "Keybind (-)", function()
	
    clicktpon = true    
        plr = game.Players.LocalPlayer
        hum = plr.Character.HumanoidRootPart
        mouse = plr:GetMouse()
        mouse.KeyDown:connect(function(key)
        if key == '-' then
        if mouse.Target then
        if clicktpon then

local args = {
    [1] = "Magic",
    [2] = {
        [1] = "Invisibility"
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Witch"):FireServer(unpack(args))


end
end
end
end)
end)

MainSection:NewToggle("Snap Neck", "Keybind (V)", function()
    print("You just clicked the bind")
    
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:
	    GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "v" then
            local player = getPlayer()
            if player then

local args = {
    [1] = "Magic",
    [2] = {
        [1] = "SnapNeck",
        [2] = player.Character
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Witch"):FireServer(unpack(args))

player.character.RagdollConstraints:destroy()

    end
    end
    end)
end)

MainSection:NewToggle("Mass Pain", "Keybind (9)", function()
	
    clicktpon = true    
        plr = game.Players.LocalPlayer
        hum = plr.Character.HumanoidRootPart
        mouse = plr:GetMouse()
        mouse.KeyDown:connect(function(key)
        if key == '9' then
        if mouse.Target then
        if clicktpon then

local args = {
    [1] = "Magic",
    [2] = {
        [1] = "AdvancedInflict"
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Witch"):FireServer(unpack(args))


end
end
end
end)
end)

MainSection:NewToggle("Fire Circle", "Keybind (C)", function()
    print("You just clicked the bind")
    
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:
	    GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "c" then
            local player = getPlayer()
            if player then

local args = {
    [1] = "Magic",
    [2] = {
        [1] = "FireCircle",
        [2] = player.Character
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Witch"):FireServer(unpack(args))


player.character.RagdollConstraints:destroy()

    end
    end
    end)
end)

MainSection:NewToggle("Disable Ring", "Keybind (H)", function()
    print("You just clicked the bind")
    
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:
	    GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "H" then
            local player = getPlayer()
            if player then

local args = {
    [1] = "Magic",
    [2] = {
        [1] = "DisableRing",
        [2] = player.Character
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Witch"):FireServer(unpack(args))


player.character.RagdollConstraints:destroy()

    end
    end
    end)
end)

MainSection:NewToggle("Enable Ring", "Keybind (J)", function()
    print("You just clicked the bind")
    
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:
	    GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "j" then
            local player = getPlayer()
            if player then

local args = {
    [1] = "Magic",
    [2] = {
        [1] = "EnableRing",
        [2] = player.Character
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Witch"):FireServer(unpack(args))


player.character.RagdollConstraints:destroy()

    end
    end
    end)
end)

MainSection:NewToggle("Teleport", "Keybind (U)", function()
	
    clicktpon = true    
        plr = game.Players.LocalPlayer
        hum = plr.Character.HumanoidRootPart
        mouse = plr:GetMouse()
        mouse.KeyDown:connect(function(key)
        if key == 'u' then
        if mouse.Target then
        if clicktpon then

local args = {
    [1] = "Magic",
    [2] = {
        [1] = "Teleport",
        [2] = Vector3.new(mouse.Hit.x, mouse.Hit.y + 5, mouse.Hit.z)
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Witch"):FireServer(unpack(args))

end
end
end
end)
end)

MainSection:NewToggle("Vervain Body", "Keybind (K)", function()
    print("You just clicked the bind")
    
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:
	    GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "k" then
            local player = getPlayer()
            if player then

local args = {
    [1] = "Magic",
    [2] = {
        [1] = "VervainBody",
        [2] = player.Character
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Witch"):FireServer(unpack(args))


player.character.RagdollConstraints:destroy()

    end
    end
    end)
end)

MainSection:NewToggle("Moon Ring", "Keybind (L)", function()
    print("You just clicked the bind")
    
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:
	    GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "l" then
            local player = getPlayer()
            if player then

local args = {
    [1] = "Magic",
    [2] = {
        [1] = "MoonRing",
        [2] = player.Character
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Witch"):FireServer(unpack(args))


player.character.RagdollConstraints:destroy()

    end
    end
    end)
end)

MainSection:NewToggle("Sleep", "Keybind (8)", function()
    print("You just clicked the bind")
    
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:
	    GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "8" then
            local player = getPlayer()
            if player then

local args = {
    [1] = "Magic",
    [2] = {
        [1] = "SleepSpell",
        [2] = player.Character
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Witch"):FireServer(unpack(args))


player.character.RagdollConstraints:destroy()

    end
    end
    end)
end)

MainSection:NewToggle("Silence", "Keybind (N)", function()
    print("You just clicked the bind")
    
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:
	    GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "n" then
            local player = getPlayer()
            if player then

local args = {
    [1] = "Magic",
    [2] = {
        [1] = "Silence",
        [2] = player.Character
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Witch"):FireServer(unpack(args))


player.character.RagdollConstraints:destroy()

    end
    end
    end)
end)

MainSection:NewToggle("Bloodchoke", "Keybind (X)", function()
    print("You just clicked the bind")
    
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:
	    GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "x" then
            local player = getPlayer()
            if player then

local args = {
    [1] = "Magic",
    [2] = {
        [1] = "BloodChoke",
        [2] = player.Character
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Witch"):FireServer(unpack(args))

player.character.RagdollConstraints:destroy()

    end
    end
    end)
end)

MainSection:NewToggle("Explosion", "Keybind (B)", function()
	
    clicktpon = true    
        plr = game.Players.LocalPlayer
        hum = plr.Character.HumanoidRootPart
        mouse = plr:GetMouse()
        mouse.KeyDown:connect(function(key)
        if key == 'b' then
        if mouse.Target then
        if clicktpon then

local args = {
    [1] = "Magic",
    [2] = {
        [1] = "Explosion",
        [2] = Vector3.new(mouse.Hit.x, mouse.Hit.y + 5, mouse.Hit.z)
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Witch"):FireServer(unpack(args))

end
end
end
end)
end)

MainSection:NewToggle("Mass Snap", "Keybind (7)", function()
	
    clicktpon = true    
        plr = game.Players.LocalPlayer
        hum = plr.Character.HumanoidRootPart
        mouse = plr:GetMouse()
        mouse.KeyDown:connect(function(key)
        if key == '7' then
        if mouse.Target then
        if clicktpon then

local args = {
    [1] = "Magic",
    [2] = {
        [1] = "SnapAll"
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Witch"):FireServer(unpack(args))

end
end
end
end)
end)

MainSection:NewToggle("Motus", "Keybind (M)", function()
	
    clicktpon = true    
        plr = game.Players.LocalPlayer
        hum = plr.Character.HumanoidRootPart
        mouse = plr:GetMouse()
        mouse.KeyDown:connect(function(key)
        if key == 'm' then
        if mouse.Target then
        if clicktpon then

local args = {
    [1] = "Magic",
    [2] = {
        [1] = "Motus",
        [2] = false
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Witch"):FireServer(unpack(args))

end
end
end
end)
end)

local Main = Window:NewTab("Hybrid")
local MainSection = Main:NewSection("Abilities")
MainSection:NewToggle("Neck Snap", "Keybind (V)", function()
    print("You just clicked the bind")
    
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:
	    GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "v" then
            local player = getPlayer()
            if player then

local args = {
    [1] = "NeckSnap",
    [2] = {
        [1] = player.Character
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Vampire"):FireServer(unpack(args))


player.character.RagdollConstraints:destroy()

    end
    end
    end)
end)

MainSection:NewToggle("Healing", "Keybind (E)", function()
    print("You just clicked the bind")
    
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:
	    GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "e" then
            local player = getPlayer()
            if player then

local args = {
    [1] = "Heal",
    [2] = {
        [1] = player.Character
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Vampire"):FireServer(unpack(args))

player.character.RagdollConstraints:destroy()

    end
    end
    end)
end)

MainSection:NewToggle("Feed", "Keybind (C)", function()
    print("You just clicked the bind")
    
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:
	    GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "c" then
            local player = getPlayer()
            if player then

local args = {
    [1] = "Feed",
    [2] = {
        [1] = player.Character
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Vampire"):FireServer(unpack(args))

player.character.RagdollConstraints:destroy()

    end
    end
    end)
end)

MainSection:NewToggle("Bite", "Keybind (T)", function()
    print("You just clicked the bind")
    
    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:
	    GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "t" then
            local player = getPlayer()
            if player then

local args = {
    [1] = "Bite",
    [2] = {
        [1] = false,
        [2] = player.Character
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Werewolf"):FireServer(unpack(args))

player.character.RagdollConstraints:destroy()

    end
    end
    end)
end)

MainSection:NewToggle("Turn", "Keybind (K)", function()
	
    clicktpon = true    
        plr = game.Players.LocalPlayer
        hum = plr.Character.HumanoidRootPart
        mouse = plr:GetMouse()
        mouse.KeyDown:connect(function(key)
        if key == 'k' then
        if mouse.Target then
        if clicktpon then

local args = {
    [1] = "Turn",
    [2] = {
        [1] = "Turn"
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Werewolf"):FireServer(unpack(args))

end
end
end
end)
end)

MainSection:NewToggle("Turn Back", "Keybind (L)", function()
	
    clicktpon = true    
        plr = game.Players.LocalPlayer
        hum = plr.Character.HumanoidRootPart
        mouse = plr:GetMouse()
        mouse.KeyDown:connect(function(key)
        if key == 'l' then
        if mouse.Target then
        if clicktpon then

local args = {
    [1] = "Turn",
    [2] = {
        [1] = "turnBack"
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Werewolf"):FireServer(unpack(args))

end
end
end
end)
end)


local Main = Window:NewTab("Misc")
local MainSection = Main:NewSection(" ")
MainSection:NewButton("Turn off Anti Cheat", "", function()
loadstring(game:HttpGet(('https://raw.githubusercontent.com/SlavicCat/MysticFallsScripts/main/AntibanCrackedByTheRussianCats.lua'),true))()
end)
MainSection:NewButton("Infinite Stamina", "", function()
loadstring(game:HttpGet(('https://raw.githubusercontent.com/SlavicCat/MysticFallsScripts/main/InfStaminaCrackedByTheRussianCats.lua'),true))()
end)
MainSection:NewButton("Dont burn in the sun", "", function()
loadstring(game:HttpGet(('https://raw.githubusercontent.com/SlavicCat/MysticFallsScripts/main/NoBurningInTheSunCrackedByTheRussianCats.lua'),true))()
end)
MainSection:NewButton("See ghosts", "", function()
loadstring(game:HttpGet(('https://raw.githubusercontent.com/SlavicCat/MysticFallsScripts/main/SeeGhostsCrackedByTheRussianCats.lua'),true))()
end)
MainSection:NewToggle("unglitch", "Keybind (1)", function()
	
    clicktpon = true    
        plr = game.Players.LocalPlayer
        hum = plr.Character.HumanoidRootPart
        mouse = plr:GetMouse()
        mouse.KeyDown:connect(function(key)
        if key == '1' then
        if mouse.Target then
        if clicktpon then


local args = {
    [1] = 66.92244720458984
}

game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("FallDamage"):FireServer(unpack(args))

end
end
end
end)
end)
