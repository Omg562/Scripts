local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("Hades God Hub | Witchcraft.v2", "DarkTheme")
local Tab = Window:NewTab("Combat")
local Section = Tab:NewSection("Powers without saying spells")
Section:NewToggle("HolyFire (Q)", " ", function(state)
    if state then
                            
        print("Toggle On")
    
        
        
             local function getPlayer()
                    local userInput = game:GetService("UserInputService")
                    local cam = workspace.CurrentCamera
                    local mousePos = userInput:GetMouseLocation()
                    local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                    players = {}
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        players[#players + 1] = x.Character
                    end
                    local raycastParams = RaycastParams.new()
                    raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                    raycastParams.FilterDescendantsInstances = players
                    raycastParams.IgnoreWater = true
                    local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                    if raycastResult then
                        for _, x in next, game:GetService('Players'):GetPlayers() do
                            if not raycastResult.Instance:IsDescendantOf(x.Character) then
                                continue 
                            end
                            return x
                        end
                    end
                    return false
                end
                
                local function Set(list)
                    local set = {}
                    for _, l in ipairs(list) do
                        if l then
                            set[l] = true
                        end
                    end
                    return set
                end
                game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                 if key == "q" then
                local player = getPlayer()
                 if player then

local args = {
    [1] = player.Character.HitPart
}

game:GetService("ReplicatedStorage").HellFire3:FireServer(unpack(args))


 end
    end
    end)   
    end
end)
Section:NewToggle("HellFire (R)", " ", function(state)
    if state then
                            
        print("Toggle On")
    
        
        
             local function getPlayer()
                    local userInput = game:GetService("UserInputService")
                    local cam = workspace.CurrentCamera
                    local mousePos = userInput:GetMouseLocation()
                    local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                    players = {}
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        players[#players + 1] = x.Character
                    end
                    local raycastParams = RaycastParams.new()
                    raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                    raycastParams.FilterDescendantsInstances = players
                    raycastParams.IgnoreWater = true
                    local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                    if raycastResult then
                        for _, x in next, game:GetService('Players'):GetPlayers() do
                            if not raycastResult.Instance:IsDescendantOf(x.Character) then
                                continue 
                            end
                            return x
                        end
                    end
                    return false
                end
                
                local function Set(list)
                    local set = {}
                    for _, l in ipairs(list) do
                        if l then
                            set[l] = true
                        end
                    end
                    return set
                end
                game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                 if key == "r" then
                local player = getPlayer()
                 if player then

local args = {
    [1] = player.Character.HitPart
}

game:GetService("ReplicatedStorage").HellFire2:FireServer(unpack(args))


 end
    end
    end)   
    end
end)
Section:NewToggle("Holy Heal (E)", "", function(state)
    if state then
                            
        print("Toggle On")
    
        
        
             local function getPlayer()
                    local userInput = game:GetService("UserInputService")
                    local cam = workspace.CurrentCamera
                    local mousePos = userInput:GetMouseLocation()
                    local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                    players = {}
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        players[#players + 1] = x.Character
                    end
                    local raycastParams = RaycastParams.new()
                    raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                    raycastParams.FilterDescendantsInstances = players
                    raycastParams.IgnoreWater = true
                    local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                    if raycastResult then
                        for _, x in next, game:GetService('Players'):GetPlayers() do
                            if not raycastResult.Instance:IsDescendantOf(x.Character) then
                                continue 
                            end
                            return x
                        end
                    end
                    return false
                end
                
                local function Set(list)
                    local set = {}
                    for _, l in ipairs(list) do
                        if l then
                            set[l] = true
                        end
                    end
                    return set
                end
                game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                 if key == "e" then
                local player = getPlayer()
                 if player then

local args = {
    [1] = player.Character.HitPart
}

game:GetService("ReplicatedStorage").HealFire2:FireServer(unpack(args))


 end
    end
    end)   
    end
end)
Section:NewToggle("Ignis (C)", " ", function(state)
    if state then
                            
        print("Toggle On")
    
        
        
             local function getPlayer()
                    local userInput = game:GetService("UserInputService")
                    local cam = workspace.CurrentCamera
                    local mousePos = userInput:GetMouseLocation()
                    local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                    players = {}
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        players[#players + 1] = x.Character
                    end
                    local raycastParams = RaycastParams.new()
                    raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                    raycastParams.FilterDescendantsInstances = players
                    raycastParams.IgnoreWater = true
                    local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                    if raycastResult then
                        for _, x in next, game:GetService('Players'):GetPlayers() do
                            if not raycastResult.Instance:IsDescendantOf(x.Character) then
                                continue 
                            end
                            return x
                        end
                    end
                    return false
                end
                
                local function Set(list)
                    local set = {}
                    for _, l in ipairs(list) do
                        if l then
                            set[l] = true
                        end
                    end
                    return set
                end
                game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                 if key == "c" then
                local player = getPlayer()
                 if player then

local args = {
    [1] = player.Character.HitPart
}

game:GetService("ReplicatedStorage").HellFire:FireServer(unpack(args))


 end
    end
    end)   
    end
end)
Section:NewToggle("Freeze (X)", " ", function(state)
    if state then
                            
        print("Toggle On")
    
        
        
             local function getPlayer()
                    local userInput = game:GetService("UserInputService")
                    local cam = workspace.CurrentCamera
                    local mousePos = userInput:GetMouseLocation()
                    local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                    players = {}
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        players[#players + 1] = x.Character
                    end
                    local raycastParams = RaycastParams.new()
                    raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                    raycastParams.FilterDescendantsInstances = players
                    raycastParams.IgnoreWater = true
                    local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                    if raycastResult then
                        for _, x in next, game:GetService('Players'):GetPlayers() do
                            if not raycastResult.Instance:IsDescendantOf(x.Character) then
                                continue 
                            end
                            return x
                        end
                    end
                    return false
                end
                
                local function Set(list)
                    local set = {}
                    for _, l in ipairs(list) do
                        if l then
                            set[l] = true
                        end
                    end
                    return set
                end
                game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                 if key == "x" then
                local player = getPlayer()
                 if player then

local args = {
    [1] = player.Character.HitPart
}

game:GetService("ReplicatedStorage").FreezeFire:FireServer(unpack(args))


 end
    end
    end)   
    end
end)
Section:NewToggle("Vine Trap (Z)", " ", function(state)
    if state then
                            
        print("Toggle On")
    
        
        
             local function getPlayer()
                    local userInput = game:GetService("UserInputService")
                    local cam = workspace.CurrentCamera
                    local mousePos = userInput:GetMouseLocation()
                    local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                    players = {}
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        players[#players + 1] = x.Character
                    end
                    local raycastParams = RaycastParams.new()
                    raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                    raycastParams.FilterDescendantsInstances = players
                    raycastParams.IgnoreWater = true
                    local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                    if raycastResult then
                        for _, x in next, game:GetService('Players'):GetPlayers() do
                            if not raycastResult.Instance:IsDescendantOf(x.Character) then
                                continue 
                            end
                            return x
                        end
                    end
                    return false
                end
                
                local function Set(list)
                    local set = {}
                    for _, l in ipairs(list) do
                        if l then
                            set[l] = true
                        end
                    end
                    return set
                end
                game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                 if key == "z" then
                local player = getPlayer()
                 if player then

local args = {
    [1] = player.Character.HitPart
}

game:GetService("ReplicatedStorage").VineTrap:FireServer(unpack(args))


 end
    end
    end)   
    end
end)
Section:NewToggle("Poison (V)", " ", function(state)
    if state then
                            
        print("Toggle On")
    
        
        
             local function getPlayer()
                    local userInput = game:GetService("UserInputService")
                    local cam = workspace.CurrentCamera
                    local mousePos = userInput:GetMouseLocation()
                    local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                    players = {}
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        players[#players + 1] = x.Character
                    end
                    local raycastParams = RaycastParams.new()
                    raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                    raycastParams.FilterDescendantsInstances = players
                    raycastParams.IgnoreWater = true
                    local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                    if raycastResult then
                        for _, x in next, game:GetService('Players'):GetPlayers() do
                            if not raycastResult.Instance:IsDescendantOf(x.Character) then
                                continue 
                            end
                            return x
                        end
                    end
                    return false
                end
                
                local function Set(list)
                    local set = {}
                    for _, l in ipairs(list) do
                        if l then
                            set[l] = true
                        end
                    end
                    return set
                end
                game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                 if key == "v" then
                local player = getPlayer()
                 if player then

local args = {
    [1] = player.Character.HitPart
}

game:GetService("ReplicatedStorage").PoisonFire:FireServer(unpack(args))


 end
    end
    end)   
    end
end)
Section:NewToggle("HealFire (E)", "", function(state)
    if state then
                            
        print("Toggle On")
    
        
        
             local function getPlayer()
                    local userInput = game:GetService("UserInputService")
                    local cam = workspace.CurrentCamera
                    local mousePos = userInput:GetMouseLocation()
                    local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                    players = {}
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        players[#players + 1] = x.Character
                    end
                    local raycastParams = RaycastParams.new()
                    raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                    raycastParams.FilterDescendantsInstances = players
                    raycastParams.IgnoreWater = true
                    local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                    if raycastResult then
                        for _, x in next, game:GetService('Players'):GetPlayers() do
                            if not raycastResult.Instance:IsDescendantOf(x.Character) then
                                continue 
                            end
                            return x
                        end
                    end
                    return false
                end
                
                local function Set(list)
                    local set = {}
                    for _, l in ipairs(list) do
                        if l then
                            set[l] = true
                        end
                    end
                    return set
                end
                game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                 if key == "e" then
                local player = getPlayer()
                 if player then

local args = {
    [1] = player.Character.HitPart
}

game:GetService("ReplicatedStorage").HealFire:FireServer(unpack(args))


 end
    end
    end)   
    end
end)

local Tab = Window:NewTab("Customs")
local Section = Tab:NewSection("Chose Custom")


Section:NewButton("Really black", "", function() 
    local ohBrickColor1 = BrickColor.new("Really black")

	game:GetService("ReplicatedStorage").Remotes.ChangeTeam:FireServer(ohBrickColor1)
end)

Section:NewButton("Carnation pink", "", function() 
    local ohBrickColor1 = BrickColor.new("Carnation pink")

	game:GetService("ReplicatedStorage").Remotes.ChangeTeam:FireServer(ohBrickColor1)
end)

Section:NewButton("Earth green", "", function() 
    local ohBrickColor1 = BrickColor.new("Earth green")

	game:GetService("ReplicatedStorage").Remotes.ChangeTeam:FireServer(ohBrickColor1)
end)

Section:NewButton("Navy blue", "", function() 
    local ohBrickColor1 = BrickColor.new("Navy blue")

	game:GetService("ReplicatedStorage").Remotes.ChangeTeam:FireServer(ohBrickColor1)
end)

Section:NewButton("New Yeller", "", function()
    local ohBrickColor1 = BrickColor.new("New Yeller")

	game:GetService("ReplicatedStorage").Remotes.ChangeTeam:FireServer(ohBrickColor1)
end)

Section:NewButton("Bright red", "", function()
    local ohBrickColor1 = BrickColor.new("Bright red")

	game:GetService("ReplicatedStorage").Remotes.ChangeTeam:FireServer(ohBrickColor1)
end)

Section:NewButton("Pastel green", "", function()
    local ohBrickColor1 = BrickColor.new("Pastel green")

	game:GetService("ReplicatedStorage").Remotes.ChangeTeam:FireServer(ohBrickColor1)
end)

Section:NewButton("Lime green", "", function()
    local ohBrickColor1 = BrickColor.new("Lime green")

	game:GetService("ReplicatedStorage").Remotes.ChangeTeam:FireServer(ohBrickColor1)
end)

Section:NewButton("Magenta", "", function()
    local ohBrickColor1 = BrickColor.new("Magenta")

	game:GetService("ReplicatedStorage").Remotes.ChangeTeam:FireServer(ohBrickColor1)
end)

Section:NewButton("Pink", "", function()
    local ohBrickColor1 = BrickColor.new("Pink")

	game:GetService("ReplicatedStorage").Remotes.ChangeTeam:FireServer(ohBrickColor1)
end)

Section:NewButton("Mulberry", "", function()
    local ohBrickColor1 = BrickColor.new("Mulberry")

	game:GetService("ReplicatedStorage").Remotes.ChangeTeam:FireServer(ohBrickColor1)
end)

Section:NewButton("Teal", "", function()
    local ohBrickColor1 = BrickColor.new("Teal")

	game:GetService("ReplicatedStorage").Remotes.ChangeTeam:FireServer(ohBrickColor1)
end)

Section:NewButton("Pastel Blue", "", function()
    local ohBrickColor1 = BrickColor.new("Pastel Blue")

	game:GetService("ReplicatedStorage").Remotes.ChangeTeam:FireServer(ohBrickColor1)
end)

local Tab = Window:NewTab("Teams")
local Section = Tab:NewSection("Chose Team")

Section:NewButton("Mortal", "", function() 
    local ohBrickColor1 = BrickColor.new("Fossil")

	game:GetService("ReplicatedStorage").Remotes.ChangeTeam:FireServer(ohBrickColor1)
end)

Section:NewButton("Weak Witch or Warlock", "", function() 
    local ohBrickColor1 = BrickColor.new("Lapis")

	game:GetService("ReplicatedStorage").Remotes.ChangeTeam:FireServer(ohBrickColor1)
end)

Section:NewButton("Pagan Witch", "", function() 
    local ohBrickColor1 = BrickColor.new("Bright bluish green")

	game:GetService("ReplicatedStorage").Remotes.ChangeTeam:FireServer(ohBrickColor1)
end)

Section:NewButton("Fairy", "", function() 
    local ohBrickColor1 = BrickColor.new("Sea green")

	game:GetService("ReplicatedStorage").Remotes.ChangeTeam:FireServer(ohBrickColor1)
end)

Section:NewButton("Hex Witch", "", function()
    local ohBrickColor1 = BrickColor.new("Persimmon")

	game:GetService("ReplicatedStorage").Remotes.ChangeTeam:FireServer(ohBrickColor1)
end)

Section:NewButton("Angel", "", function()
    local ohBrickColor1 = BrickColor.new("Cool yellow")

	game:GetService("ReplicatedStorage").Remotes.ChangeTeam:FireServer(ohBrickColor1)
end)

Section:NewButton("Fallen Angel", "", function()
    local ohBrickColor1 = BrickColor.new("Black")

	game:GetService("ReplicatedStorage").Remotes.ChangeTeam:FireServer(ohBrickColor1)
end)

Section:NewButton("Royal Bloodline", "", function()
    local ohBrickColor1 = BrickColor.new("Crimson")

	game:GetService("ReplicatedStorage").Remotes.ChangeTeam:FireServer(ohBrickColor1)
end)

local Tab = Window:NewTab("Powers")
local Section = Tab:NewSection("Powers with saying spells")

Section:NewToggle("Incendia", "C", function()

local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "c" then
            local player = getPlayer()
            if player then


local args = {
    [1] = "Incendia",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))


local args = {
    [1] = player.Character.HitPart
}

game:GetService("ReplicatedStorage").HellFire:FireServer(unpack(args))

end
end
end)
end)

Section:NewButton("Giving Flashbacks from Salem (All)", "", function()


local args = {
    [1] = "Im gonna give yall flashbacks from Salem",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))

    local Plr = game.Players.LocalPlayer
    for i, Player in pairs(game.Players:GetPlayers()) do

        if Player.Character ~= nil and Player ~= Plr then
            local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
            if mag < 10000 then
                local Target = Player.Character or Player.CharacterAdded:Wait()


local args = {
    [1] = Target.HitPart
}

game:GetService("ReplicatedStorage").HellFire:FireServer(unpack(args))


            end
        end
    end

end)

Section:NewToggle("Burns (Angel)", "Q", function()


    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "q" then
            local player = getPlayer()
            if player then


local args = {
    [1] = "Burns",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))


local args = {
    [1] = player.Character.HitPart
}

game:GetService("ReplicatedStorage").HellFire3:FireServer(unpack(args))


end
end
end)
end)

Section:NewButton("I am the Dark Phoenix! (Angel)", "", function()

local args = {
    [1] = "I am the Dark Phoenix!",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))

    local Plr = game.Players.LocalPlayer
    for i, Player in pairs(game.Players:GetPlayers()) do

        if Player.Character ~= nil and Player ~= Plr then
            local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
            if mag < 10000 then
                local Target = Player.Character or Player.CharacterAdded:Wait()



local args = {
    [1] = Target.HitPart
}

game:GetService("ReplicatedStorage").HellFire3:FireServer(unpack(args))



            end
        end
    end

end)

Section:NewButton("No more mutants (Angel)", "", function()

local args = {
    [1] = "No more mutants",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))

    local Plr = game.Players.LocalPlayer
    for i, Player in pairs(game.Players:GetPlayers()) do

        if Player.Character ~= nil and Player ~= Plr then
            local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
            if mag < 10000 then
                local Target = Player.Character or Player.CharacterAdded:Wait()



local args = {
    [1] = Target.HitPart
}

game:GetService("ReplicatedStorage").HellFire3:FireServer(unpack(args))



            end
        end
    end

end)

Section:NewToggle("Burns (Fallen Angel)", "R", function()

    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "r" then
            local player = getPlayer()
            if player then


local args = {
    [1] = "burns",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))


local args = {
    [1] = player.Character.HitPart
}

game:GetService("ReplicatedStorage").HellFire2:FireServer(unpack(args))


end
end
end)
end)

Section:NewButton("Telebrate (Fallen angel)", "", function()


local args = {
    [1] = "Telebrate!",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))


 local args = {
    [1] = "",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))

    local Plr = game.Players.LocalPlayer
    for i, Player in pairs(game.Players:GetPlayers()) do

        if Player.Character ~= nil and Player ~= Plr then
            local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
            if mag < 10000 then
                local Target = Player.Character or Player.CharacterAdded:Wait()


 local args = {
    [1] = Target.HitPart
}

game:GetService("ReplicatedStorage").HellFire2:FireServer(unpack(args))

            end
        end
    end

end)

Section:NewButton("Sabrina's burning (Fallen angel)", "", function()


local args = {
    [1] = "I, Sabrina Spellman, daughter of Edward Spellman, child of night, call forth... FIRE!",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))


 local args = {
    [1] = "",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))

    local Plr = game.Players.LocalPlayer
    for i, Player in pairs(game.Players:GetPlayers()) do

        if Player.Character ~= nil and Player ~= Plr then
            local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
            if mag < 10000 then
                local Target = Player.Character or Player.CharacterAdded:Wait()


 local args = {
    [1] = Target.HitPart
}

game:GetService("ReplicatedStorage").HellFire2:FireServer(unpack(args))

            end
        end
    end

end)

Section:NewToggle("Sneeze", "Z", function()

    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "z" then
            local player = getPlayer()
            if player then


local args = {
    [1] = "Sneeze",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))



local args = {
    [1] = player.Character.HitPart
}

game:GetService("ReplicatedStorage").FreezeFire:FireServer(unpack(args))


end
end
end)
end)

Section:NewButton("Sneeze!", "", function()


local args = {
    [1] = "Sneeze!",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))
    -- Script generated by ClaudiaSpy - credits to ClaudiaHOTM#2452
    local Plr = game.Players.LocalPlayer
    for i, Player in pairs(game.Players:GetPlayers()) do

        if Player.Character ~= nil and Player ~= Plr then
            local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
            if mag < 10000 then
                local Target = Player.Character or Player.CharacterAdded:Wait()



local args = {
    [1] = Target.HitPart
}

game:GetService("ReplicatedStorage").FreezeFire:FireServer(unpack(args))


            end
        end
    end

end)

Section:NewToggle("Stuck?", "X", function()


    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "x" then
            local player = getPlayer()
            if player then


local args = {
    [1] = "Stuck?",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))


local args = {
    [1] = player.Character.HitPart
}

game:GetService("ReplicatedStorage").VineTrap:FireServer(unpack(args))


end
end
end)
end)

Section:NewButton("Yall are stuck", "", function()


local args = {
    [1] = "Yall are stuck",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))

    local Plr = game.Players.LocalPlayer
    for i, Player in pairs(game.Players:GetPlayers()) do

        if Player.Character ~= nil and Player ~= Plr then
            local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
            if mag < 10000 then
                local Target = Player.Character or Player.CharacterAdded:Wait()



local args = {
    [1] = Target.HitPart
}

game:GetService("ReplicatedStorage").VineTrap:FireServer(unpack(args))


            end
        end
    end

end)

Section:NewToggle("Holy heal", "E", function()

    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "e" then
            local player = getPlayer()
            if player then


local args = {
    [1] = "Heals",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))



local args = {
    [1] = player.Character.HitPart
}

game:GetService("ReplicatedStorage").HealFire2:FireServer(unpack(args))

end
end
end)
end)

Section:NewButton("Holy Heal All", "", function()


local args = {
    [1] = "heal all",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))

    local Plr = game.Players.LocalPlayer
    for i, Player in pairs(game.Players:GetPlayers()) do

        if Player.Character ~= nil and Player ~= Plr then
            local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
            if mag < 10000 then
                local Target = Player.Character or Player.CharacterAdded:Wait()



local args = {
    [1] = Target.HitPart
}

game:GetService("ReplicatedStorage").HealFire2:FireServer(unpack(args))


            end
        end
    end

end)

Section:NewToggle("Healfire", "E", function()

    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "e" then
            local player = getPlayer()
            if player then


local args = {
    [1] = "Heals",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))



local args = {
    [1] = player.Character.HitPart
}

game:GetService("ReplicatedStorage").HealFire:FireServer(unpack(args))

end
end
end)
end)

Section:NewButton("Healfire All", "", function()


local args = {
    [1] = "heal all",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))

    local Plr = game.Players.LocalPlayer
    for i, Player in pairs(game.Players:GetPlayers()) do

        if Player.Character ~= nil and Player ~= Plr then
            local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
            if mag < 10000 then
                local Target = Player.Character or Player.CharacterAdded:Wait()



local args = {
    [1] = Target.HitPart
}

game:GetService("ReplicatedStorage").HealFire:FireServer(unpack(args))


            end
        end
    end

end)

Section:NewToggle("Youre sick", "V", function()

    local function getPlayer()
        local userInput = game:GetService("UserInputService")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue
                end
                return x
            end
        end
        return false
    end

    local function Set(list)
        local set = {}
        for _, l in ipairs(list) do
            if l then
                set[l] = true
            end
        end
        return set
    end

    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if key == "v" then
            local player = getPlayer()
            if player then



local args = {
    [1] = "Youre sick",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))


local args = {
    [1] = player.Character.HitPart
}

game:GetService("ReplicatedStorage").PoisonFire:FireServer(unpack(args))

end
end
end)
end)

Section:NewButton("Yall sick", "", function()


local args = {
    [1] = "Yall sick",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))
    -- Script generated by ClaudiaSpy - credits to ClaudiaHOTM#2452
    local Plr = game.Players.LocalPlayer
    for i, Player in pairs(game.Players:GetPlayers()) do

        if Player.Character ~= nil and Player ~= Plr then
            local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
            if mag < 10000 then
                local Target = Player.Character or Player.CharacterAdded:Wait()



local args = {
    [1] = Target.HitPart

}

game:GetService("ReplicatedStorage").PoisonFire:FireServer(unpack(args))


            end
        end
    end

end)

local Tab = Window:NewTab("Target & More")
local Section = Tab:NewSection("Useful")

Section:NewTextBox("Holy Fire Someone", "", function(txt)
    local Players = game:GetService("Players")
    local msg = txt
    local function findPlayer(stringg)
        for _, v in pairs(Players:GetPlayers()) do
            if stringg:lower() == (v.Name:lower()):sub(1, #stringg) then
                return v
            end
        end
    end

    local player = findPlayer(msg)
    local CHAR = player.Character


local args = {
    [1] = player.Character.HitPart
}

game:GetService("ReplicatedStorage").HellFire3:FireServer(unpack(args))
end)
Section:NewTextBox("Hellfire Someone", "", function(txt)
    local Players = game:GetService("Players")
    local msg = txt
    local function findPlayer(stringg)
        for _, v in pairs(Players:GetPlayers()) do
            if stringg:lower() == (v.Name:lower()):sub(1, #stringg) then
                return v
            end
        end
    end

    local player = findPlayer(msg)
    local CHAR = player.Character


local args = {
    [1] = player.Character.HitPart
}

game:GetService("ReplicatedStorage").HellFire2:FireServer(unpack(args))
end)
Section:NewTextBox("Vine Trap Someone", "", function(txt)
    local Players = game:GetService("Players")
    local msg = txt
    local function findPlayer(stringg)
        for _, v in pairs(Players:GetPlayers()) do
            if stringg:lower() == (v.Name:lower()):sub(1, #stringg) then
                return v
            end
        end
    end

    local player = findPlayer(msg)
    local CHAR = player.Character

local args = {
    [1] = player.Character.HitPart
}

game:GetService("ReplicatedStorage").VineTrap:FireServer(unpack(args))
end)
Section:NewTextBox("Freeze Someone", "", function(txt)
    local Players = game:GetService("Players")
    local msg = txt
    local function findPlayer(stringg)
        for _, v in pairs(Players:GetPlayers()) do
            if stringg:lower() == (v.Name:lower()):sub(1, #stringg) then
                return v
            end
        end
    end

    local player = findPlayer(msg)
    local CHAR = player.Character


local args = {
    [1] = player.Character.HitPart
}

game:GetService("ReplicatedStorage").FreezeFire:FireServer(unpack(args))
end)
Section:NewTextBox("HealFire Someone", "", function(txt)
    local Players = game:GetService("Players")
    local msg = txt
    local function findPlayer(stringg)
        for _, v in pairs(Players:GetPlayers()) do
            if stringg:lower() == (v.Name:lower()):sub(1, #stringg) then
                return v
            end
        end
    end

    local player = findPlayer(msg)
    local CHAR = player.Character

local args = {
    [1] = player.Character.HitPart
}

game:GetService("ReplicatedStorage").HealFire:FireServer(unpack(args))
end)
Section:NewTextBox("Holy Heal Someone", "", function(txt)
    local Players = game:GetService("Players")
    local msg = txt
    local function findPlayer(stringg)
        for _, v in pairs(Players:GetPlayers()) do
            if stringg:lower() == (v.Name:lower()):sub(1, #stringg) then
                return v
            end
        end
    end

    local player = findPlayer(msg)
    local CHAR = player.Character


local args = {
    [1] = player.Character.HitPart
}

game:GetService("ReplicatedStorage").HealFire2:FireServer(unpack(args))
end)
Section:NewTextBox("Poison Someone", "", function(txt)
    local Players = game:GetService("Players")
    local msg = txt
    local function findPlayer(stringg)
        for _, v in pairs(Players:GetPlayers()) do
            if stringg:lower() == (v.Name:lower()):sub(1, #stringg) then
                return v
            end
        end
    end

    local player = findPlayer(msg)


local args = {
    [1] = player.Character.HitPart
}

game:GetService("ReplicatedStorage").PoisonFire:FireServer(unpack(args))
end)

Section:NewButton("Burn Angel Wing", "", function()
    game:GetService("ReplicatedStorage").BurnAngelWing:FireServer()
end)

Section:NewButton("Horns", "", function()
    game:GetService("ReplicatedStorage").SpiritFused:FireServer()
end)


Section:NewButton("Sign Book", "", function()
    game:GetService("ReplicatedStorage").HaveSigned:FireServer()
end)

Section:NewButton("Beam", "", function()
    game:GetService("ReplicatedStorage").TeleportBeam1:FireServer()
end)

Section:NewButton("Get all Badges", "", function()
    loadstring(game:HttpGet('https://pastebin.com/raw/27QBYUGG'))()
end)
Section:NewButton("Moon Change", "", function()
    game:GetService("ReplicatedStorage").MoonChange:FireServer()
end)

local Tab = Window:NewTab("Teleports")
local Section = Tab:NewSection("Places")

Section:NewButton("Heaven", "", function()


local args = {
    [1] = "Sky daddy im coming!",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))

    game:GetService("ReplicatedStorage").ToHeaven:FireServer()
end)

Section:NewButton("Leave Heaven", "", function()


local args = {
    [1] = "see ya sky daddy!",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))

    game:GetService("ReplicatedStorage").OutHeaven:FireServer()
end)

Section:NewButton("Hell", "", function()

local args = {
    [1] = "Lets go meet Luci",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))

    game:GetService("ReplicatedStorage").ToHell:FireServer()
end)

Section:NewButton("The Void", "", function()


local args = {
    [1] = "Lets go meet Sabrina",
    [2] = "All"
}

game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))

    game:GetService("ReplicatedStorage").TheVoidPor:FireServer()
end)

Section:NewButton("CON", "", function()
    game:GetService("ReplicatedStorage").Teleport1:FireServer()
end)

Section:NewButton("Circle", "", function()
    game:GetService("ReplicatedStorage").Teleport2:FireServer()
end)

local Tab = Window:NewTab("Coins & Shop")
local Section = Tab:NewSection("Buy anything you want :)")
Section:NewButton("100m Coins", "at your own risk...", function()
local args = {
    [1] = 100000000
}
game:GetService("ReplicatedStorage").Remotes.GiveCurrency:FireServer(unpack(args))
end)

Section:NewButton("5k Coins", "So mod wont know youre exploiting", function()
local args = {
    [1] = 5000
}
game:GetService("ReplicatedStorage").Remotes.GiveCurrency:FireServer(unpack(args))
end)

Section:NewButton("Greater Health Potion", "Heal", function()
    
local args = {
    [1] = "Greater Health Potion"
}

game:GetService("ReplicatedStorage").Remotes.BuyItem:FireServer(unpack(args))
end)

Section:NewButton("Size Potion", "Decrease your size", function()

local args = {
    [1] = "Size Potion"
}

game:GetService("ReplicatedStorage").Remotes.BuyItem:FireServer(unpack(args))

    print("Clicked")
end)

Section:NewButton("Swiftness Potion", "Run Fast", function()

local args = {
    [1] = "Swiftness Potion"
}

game:GetService("ReplicatedStorage").Remotes.BuyItem:FireServer(unpack(args))

    print("Clicked")
end)

Section:NewButton("Regeneration Potion", "Heal", function()

local args = {
    [1] = "Regeneration Potion"
}

game:GetService("ReplicatedStorage").Remotes.BuyItem:FireServer(unpack(args))

    print("Clicked")
end)

Section:NewButton("Health Potion", "Heal", function()

    local args = {
        [1] = "Health Potion"
    }
    
    game:GetService("ReplicatedStorage").Remotes.BuyItem:FireServer(unpack(args))
    
        print("Clicked")
    end)

    Section:NewButton("Buy Mind Stone", "ButtonInfo", function()
        print("Clicked")
        local args = {
        [1] = "Bought Mind Stone"
    }
    
    game:GetService("ReplicatedStorage").Remotes.BuyItem:FireServer(unpack(args))
    end)

    Section:NewButton("Buy Celestial Stone", "ButtonInfo", function()
        print("Clicked")
        local args = {
        [1] = "Celestial Stone"
    }
    
    game:GetService("ReplicatedStorage").Remotes.BuyItem:FireServer(unpack(args))
    end)
    
        Section:NewButton("Buy Invisibility Potion", "ButtonInfo", function()
        print("Clicked")
        local args = {
        [1] = "Invisibility Potion"
    }
    
    game:GetService("ReplicatedStorage").Remotes.BuyItem:FireServer(unpack(args))
    end)

    Section:NewButton("Buy Dimensional Shards", "ButtonInfo", function()
        print("Clicked")
        local args = {
        [1] = "Dimensional Shards"
    }
    
    game:GetService("ReplicatedStorage").Remotes.BuyItem:FireServer(unpack(args))
    end)

    Section:NewButton("Buy Nature Scroll", "ButtonInfo", function()
        print("Clicked")
        local args = {
        [1] = "Nature Scroll"
    }
    
    game:GetService("ReplicatedStorage").Remotes.BuyItem:FireServer(unpack(args))
    end)

    Section:NewButton("Buy Angelic Scroll", "ButtonInfo", function()
        print("Clicked")
        local args = {
        [1] = "Angelic Scroll"
    }
    
    game:GetService("ReplicatedStorage").Remotes.BuyItem:FireServer(unpack(args))
    end)

    Section:NewButton("Buy Magic Scroll", "ButtonInfo", function()
        print("Clicked")
        local args = {
        [1] = "Magic Scroll"
    }
    
    game:GetService("ReplicatedStorage").Remotes.BuyItem:FireServer(unpack(args))
    end)

    Section:NewButton("Buy Magic Candle", "ButtonInfo", function()
        print("Clicked")
        local args = {
        [1] = "Magic Candle"
    }
    
    game:GetService("ReplicatedStorage").Remotes.BuyItem:FireServer(unpack(args))
    end)
	local Tab = Window:NewTab("Teleport spells")
local Section = Tab:NewSection("teleport to circle etc")
Section:NewButton("Teleport to circle (Hex)", "Only works for Hex Witches", function()
    game.Players:Chat("hex teleportation circle")

end)
Section:NewButton("Teleport to circle (Angel)", "Only works for Angels", function()
    game.Players:Chat("holy teleportation circle")

end)
Section:NewButton("Teleport to circle (Fallen Angel)", "Only works for Fallens", function()
    game.Players:Chat("hellfire teleportation circle")

end)
Section:NewButton("Teleport to village (Hex)", "Only works for hex witches", function()
    game.Players:Chat("hex teleportation village")

end)
Section:NewButton("Teleport to village (Angel)", "Only works for Angels", function()
    game.Players:Chat("holy teleportation village")

end)
Section:NewButton("Teleport to village (Fallen Angel)", "Only works for Fallens", function()
    game.Players:Chat("hellfire teleportation village")

end)
Section:NewButton("Teleport to con (Hex)", "Only works for hex witches", function()
    game.Players:Chat("hex teleportation con")

end)
Section:NewButton("Teleport to con (Angel)", "Only works for Angels", function()
    game.Players:Chat("holy teleportation con")

end)
Section:NewButton("Teleport to con (Fallen Angel)", "Only works for Fallens", function()
    game.Players:Chat("hellfire teleportation con")

end)
    local Tab = Window:NewTab("Others")
local Section = Tab:NewSection("Random things")
Section:NewButton("Infinite Yield", "Admin", function()
    loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()

end)

Section:NewTextBox("Character speed", "Type in a number to make the speed u want", function(txt)
	game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = txt
end)
Section:NewTextBox("Character Jump power", "Type in a number to make the jump power u want", function(txt)
	game.Players.LocalPlayer.Character.Humanoid.JumpPower = txt
end)
Section:NewButton("Fly", "", function()
	loadstring(game:HttpGet("https://pastebin.com/raw/4YFDp7y9"))()
end)
Section:NewButton("Chat Bypass", "", function()
	loadstring(game:HttpGet(('https://raw.githubusercontent.com/vqmpjay/chatbypasser/main/chatbypasserv1'),true))()
end)

local Tab = Window:NewTab("Credits")
local SettingsSection = Tab:NewSection("discord: Hades#2087")

local SettingsSection = Tab:NewSection("Toggle UI")
SettingsSection:NewKeybind("Toggle UI", "Toggle UI", Enum.KeyCode.M, function()
    Library:ToggleUI()
end)
